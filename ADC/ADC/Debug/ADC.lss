
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001171  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f0  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f1  00000000  00000000  00002165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000478  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000085e  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 02 	call	0x48c	; 0x48c <main>
  64:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
	#if    ADC_Voltage_REF==ADC_AREF
	CLR_BIT(ADMAX,6);
	CLR_BIT(ADMAX,7);
	
	#elif  ADC_Voltage_REF==ADC_AVCC
	SET_BIT(ADMAX,6);
  6c:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMAX,7);
  6e:	3f 98       	cbi	0x07, 7	; 7
	
	
	#if   ADC_Channel==ADC_Channel_0
	
	#elif ADC_Channel==ADC_Channel_1
	SET_BIT(ADMAX,0);
  70:	38 9a       	sbi	0x07, 0	; 7
	#endif
	
	
	
	#if   ADC_Adjust==ADC_Right_ADJUST
	CLR_BIT(ADMAX,5);
  72:	3d 98       	cbi	0x07, 5	; 7
	#endif
	
	
	#if   ADC_CONVERSION_Trigger==ADC_AUTO_TRIGGER
	
	SET_BIT(ADCSRA,2);
  74:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,1);
	SET_BIT(ADCSRA,2);
	
	#elif ADC_PRESCALER==ADC_PRESCALER_128
	
	SET_BIT(ADCSRA,0);
  76:	30 9a       	sbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
  78:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
  7a:	32 9a       	sbi	0x06, 2	; 6
	
	
	
	#if   ADC_INT_STATUS==ADC_INT_DS
	
	CLR_BIT(ADCSRA,3);
  7c:	33 98       	cbi	0x06, 3	; 6
	SET_BIT(ADCSRA,3);

	#endif
	
	
	SET_BIT(ADCSRA,7);
  7e:	37 9a       	sbi	0x06, 7	; 6
  80:	08 95       	ret

00000082 <ADC_Read>:
}
void ADC_Read(uint16 *value)
{
	
	uint16 Digital_val =0;
	SET_BIT(ADCSRA,6);
  82:	36 9a       	sbi	0x06, 6	; 6
	
	#if ADC_INT_STATUS==ADC_INT_DS
	
	
	while(!GET_BIT(ADCSRA,4));
  84:	34 9b       	sbis	0x06, 4	; 6
  86:	fe cf       	rjmp	.-4      	; 0x84 <ADC_Read+0x2>
	
	Digital_val = ADC_RESULT ; 
  88:	64 b1       	in	r22, 0x04	; 4
  8a:	75 b1       	in	r23, 0x05	; 5
	
	*value = ((Digital_val*500)/1024);
  8c:	44 ef       	ldi	r20, 0xF4	; 244
  8e:	51 e0       	ldi	r21, 0x01	; 1
  90:	64 9f       	mul	r22, r20
  92:	90 01       	movw	r18, r0
  94:	65 9f       	mul	r22, r21
  96:	30 0d       	add	r19, r0
  98:	74 9f       	mul	r23, r20
  9a:	30 0d       	add	r19, r0
  9c:	11 24       	eor	r1, r1
  9e:	23 2f       	mov	r18, r19
  a0:	26 95       	lsr	r18
  a2:	26 95       	lsr	r18
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_SetPinDir>:
		case DIO_PORTC:
		PORTC = val ;
		break;
		
		case DIO_PORTD:
		PORTD = val ;
  ac:	44 23       	and	r20, r20
  ae:	b9 f1       	breq	.+110    	; 0x11e <DIO_SetPinDir+0x72>
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_SetPinDir+0xa>
  b4:	6b c0       	rjmp	.+214    	; 0x18c <DIO_SetPinDir+0xe0>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	89 f0       	breq	.+34     	; 0xdc <DIO_SetPinDir+0x30>
  ba:	28 f0       	brcs	.+10     	; 0xc6 <DIO_SetPinDir+0x1a>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	c9 f0       	breq	.+50     	; 0xf2 <DIO_SetPinDir+0x46>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	11 f1       	breq	.+68     	; 0x108 <DIO_SetPinDir+0x5c>
  c4:	08 95       	ret
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDir+0x26>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDir+0x22>
  d6:	82 2b       	or	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDir+0x3c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDir+0x38>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
  f2:	24 b3       	in	r18, 0x14	; 20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_SetPinDir+0x52>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_SetPinDir+0x4e>
 102:	82 2b       	or	r24, r18
 104:	84 bb       	out	0x14, r24	; 20
 106:	08 95       	ret
 108:	21 b3       	in	r18, 0x11	; 17
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDir+0x68>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDir+0x64>
 118:	82 2b       	or	r24, r18
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	08 95       	ret
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	91 f0       	breq	.+36     	; 0x146 <DIO_SetPinDir+0x9a>
 122:	28 f0       	brcs	.+10     	; 0x12e <DIO_SetPinDir+0x82>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	d9 f0       	breq	.+54     	; 0x15e <DIO_SetPinDir+0xb2>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	29 f1       	breq	.+74     	; 0x176 <DIO_SetPinDir+0xca>
 12c:	08 95       	ret
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0x8e>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0x8a>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	8a bb       	out	0x1a, r24	; 26
 144:	08 95       	ret
 146:	27 b3       	in	r18, 0x17	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPinDir+0xa6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPinDir+0xa2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	87 bb       	out	0x17, r24	; 23
 15c:	08 95       	ret
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPinDir+0xbe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPinDir+0xba>
 16e:	80 95       	com	r24
 170:	82 23       	and	r24, r18
 172:	84 bb       	out	0x14, r24	; 20
 174:	08 95       	ret
 176:	21 b3       	in	r18, 0x11	; 17
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPinDir+0xd6>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPinDir+0xd2>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret

0000018e <DIO_WritePin>:
		break;
	}
}
void DIO_WritePin  (uint8 port , uint8 pin , uint8 val)
{
	switch(val){
 18e:	44 23       	and	r20, r20
 190:	b9 f1       	breq	.+110    	; 0x200 <DIO_WritePin+0x72>
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	09 f0       	breq	.+2      	; 0x198 <DIO_WritePin+0xa>
 196:	6b c0       	rjmp	.+214    	; 0x26e <DIO_WritePin+0xe0>
		case DIO_PIN_HIGH:
		switch(port){
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	89 f0       	breq	.+34     	; 0x1be <DIO_WritePin+0x30>
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <DIO_WritePin+0x1a>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	c9 f0       	breq	.+50     	; 0x1d4 <DIO_WritePin+0x46>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	11 f1       	breq	.+68     	; 0x1ea <DIO_WritePin+0x5c>
 1a6:	08 95       	ret
			case DIO_PORTA :
			SET_BIT(PORTA,pin);
 1a8:	2b b3       	in	r18, 0x1b	; 27
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_WritePin+0x26>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_WritePin+0x22>
 1b8:	82 2b       	or	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
			break;
 1bc:	08 95       	ret
			
			case DIO_PORTB :
			SET_BIT(PORTB,pin);
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_WritePin+0x3c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_WritePin+0x38>
 1ce:	82 2b       	or	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
			break;
 1d2:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(PORTC,pin);
 1d4:	25 b3       	in	r18, 0x15	; 21
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_WritePin+0x52>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_WritePin+0x4e>
 1e4:	82 2b       	or	r24, r18
 1e6:	85 bb       	out	0x15, r24	; 21
			break;
 1e8:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(PORTD,pin);
 1ea:	22 b3       	in	r18, 0x12	; 18
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_WritePin+0x68>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_WritePin+0x64>
 1fa:	82 2b       	or	r24, r18
 1fc:	82 bb       	out	0x12, r24	; 18
			break;
 1fe:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW:
		
		switch(port){
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	91 f0       	breq	.+36     	; 0x228 <DIO_WritePin+0x9a>
 204:	28 f0       	brcs	.+10     	; 0x210 <DIO_WritePin+0x82>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	d9 f0       	breq	.+54     	; 0x240 <DIO_WritePin+0xb2>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	29 f1       	breq	.+74     	; 0x258 <DIO_WritePin+0xca>
 20e:	08 95       	ret
			case DIO_PORTA :
			CLR_BIT(PORTA,pin);
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_WritePin+0x8e>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_WritePin+0x8a>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	8b bb       	out	0x1b, r24	; 27
			break;
 226:	08 95       	ret
			
			case DIO_PORTB :
			CLR_BIT(PORTB,pin);
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_WritePin+0xa6>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_WritePin+0xa2>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	88 bb       	out	0x18, r24	; 24
			break;
 23e:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(PORTC,pin);
 240:	25 b3       	in	r18, 0x15	; 21
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_WritePin+0xbe>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_WritePin+0xba>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	85 bb       	out	0x15, r24	; 21
			break;
 256:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(PORTD,pin);
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_WritePin+0xd6>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_WritePin+0xd2>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	82 bb       	out	0x12, r24	; 18
 26e:	08 95       	ret

00000270 <LCD_WrtieCommand>:
{
	
	uint8 arr[]={0x80,0xc0};
	LCD_WrtieCommand(arr[row]+col);
	
}
 270:	cf 93       	push	r28
 272:	c8 2f       	mov	r28, r24
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	63 e0       	ldi	r22, 0x03	; 3
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	9c 2f       	mov	r25, r28
 296:	90 7f       	andi	r25, 0xF0	; 240
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	89 2b       	or	r24, r25
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 2a8:	8f e9       	ldi	r24, 0x9F	; 159
 2aa:	9f e0       	ldi	r25, 0x0F	; 15
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_WrtieCommand+0x3c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_WrtieCommand+0x42>
 2b2:	00 00       	nop
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 2be:	2b b3       	in	r18, 0x1b	; 27
 2c0:	30 e1       	ldi	r19, 0x10	; 16
 2c2:	c3 9f       	mul	r28, r19
 2c4:	c0 01       	movw	r24, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	92 2f       	mov	r25, r18
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 2b       	or	r24, r25
 2ce:	8b bb       	out	0x1b, r24	; 27
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_WrtieCommand+0x6e>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_WrtieCommand+0x74>
 2e4:	00 00       	nop
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	9e e4       	ldi	r25, 0x4E	; 78
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_WrtieCommand+0x84>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_WrtieCommand+0x8a>
 2fa:	00 00       	nop
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <LCD_INIT>:
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDir>
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDir>
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDir>
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDir>
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDir>
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	66 e0       	ldi	r22, 0x06	; 6
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDir>
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	67 e0       	ldi	r22, 0x07	; 7
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDir>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	81 ee       	ldi	r24, 0xE1	; 225
 34a:	94 e0       	ldi	r25, 0x04	; 4
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <LCD_INIT+0x4c>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_INIT+0x56>
 356:	00 00       	nop
 358:	83 e3       	ldi	r24, 0x33	; 51
 35a:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 35e:	82 e3       	ldi	r24, 0x32	; 50
 360:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 364:	88 e2       	ldi	r24, 0x28	; 40
 366:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 376:	86 e0       	ldi	r24, 0x06	; 6
 378:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 382:	08 95       	ret

00000384 <LCD_WrtieChar>:
 384:	cf 93       	push	r28
 386:	c8 2f       	mov	r28, r24
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 3a6:	8c 2f       	mov	r24, r28
 3a8:	80 7f       	andi	r24, 0xF0	; 240
 3aa:	8b bb       	out	0x1b, r24	; 27
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 3b6:	8f e9       	ldi	r24, 0x9F	; 159
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_WrtieChar+0x36>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_WrtieChar+0x3c>
 3c0:	00 00       	nop
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 3cc:	c2 95       	swap	r28
 3ce:	c0 7f       	andi	r28, 0xF0	; 240
 3d0:	cb bb       	out	0x1b, r28	; 27
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	63 e0       	ldi	r22, 0x03	; 3
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 3dc:	8f e9       	ldi	r24, 0x9F	; 159
 3de:	9f e0       	ldi	r25, 0x0F	; 15
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_WrtieChar+0x5c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_WrtieChar+0x62>
 3e6:	00 00       	nop
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_WritePin>
 3f2:	8f e1       	ldi	r24, 0x1F	; 31
 3f4:	9e e4       	ldi	r25, 0x4E	; 78
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_WrtieChar+0x72>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_WrtieChar+0x78>
 3fc:	00 00       	nop
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <LCD_Clear>:
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 38 01 	call	0x270	; 0x270 <LCD_WrtieCommand>
 408:	08 95       	ret

0000040a <LCD_WrtieNumber>:

void LCD_WrtieNumber(int32 num )
{
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	ec 01       	movw	r28, r24
	int32 temp = 1;
	
	if(num<0)
 414:	99 23       	and	r25, r25
 416:	34 f4       	brge	.+12     	; 0x424 <LCD_WrtieNumber+0x1a>
	{
		num*=-1;
 418:	d1 95       	neg	r29
 41a:	c1 95       	neg	r28
 41c:	d1 09       	sbc	r29, r1
		LCD_WrtieChar('-');
 41e:	8d e2       	ldi	r24, 0x2D	; 45
 420:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_WrtieChar>
	}
	
	while (num > 0) {
 424:	1c 16       	cp	r1, r28
 426:	1d 06       	cpc	r1, r29
 428:	64 f5       	brge	.+88     	; 0x482 <LCD_WrtieNumber+0x78>
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
		temp=((temp*10)+(num % 10));
 42e:	ea e0       	ldi	r30, 0x0A	; 10
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	9c 01       	movw	r18, r24
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	28 0f       	add	r18, r24
 446:	39 1f       	adc	r19, r25
 448:	ce 01       	movw	r24, r28
 44a:	bf 01       	movw	r22, r30
 44c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__divmodhi4>
 450:	82 0f       	add	r24, r18
 452:	93 1f       	adc	r25, r19
		num /= 10;
 454:	c6 2f       	mov	r28, r22
 456:	d7 2f       	mov	r29, r23
	{
		num*=-1;
		LCD_WrtieChar('-');
	}
	
	while (num > 0) {
 458:	1c 16       	cp	r1, r28
 45a:	1d 06       	cpc	r1, r29
 45c:	54 f3       	brlt	.-44     	; 0x432 <LCD_WrtieNumber+0x28>
		temp=((temp*10)+(num % 10));
		num /= 10;
	}
	while(temp > 1 )
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	91 05       	cpc	r25, r1
 462:	7c f0       	brlt	.+30     	; 0x482 <LCD_WrtieNumber+0x78>
	{
		LCD_WrtieChar(((temp%10)+48));
 464:	0a e0       	ldi	r16, 0x0A	; 10
 466:	10 e0       	ldi	r17, 0x00	; 0
 468:	b8 01       	movw	r22, r16
 46a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__divmodhi4>
 46e:	d6 2f       	mov	r29, r22
 470:	c7 2f       	mov	r28, r23
 472:	80 5d       	subi	r24, 0xD0	; 208
 474:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_WrtieChar>
		temp /= 10;
 478:	8d 2f       	mov	r24, r29
 47a:	9c 2f       	mov	r25, r28
	
	while (num > 0) {
		temp=((temp*10)+(num % 10));
		num /= 10;
	}
	while(temp > 1 )
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	91 05       	cpc	r25, r1
 480:	9c f7       	brge	.-26     	; 0x468 <LCD_WrtieNumber+0x5e>
	{
		LCD_WrtieChar(((temp%10)+48));
		temp /= 10;
	}
	
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <main>:
#include "LCD.h"
#include "Temp_Sensor.h"


int main(void)
{
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	00 d0       	rcall	.+0      	; 0x492 <main+0x6>
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
    LCD_INIT();
 496:	0e 94 80 01 	call	0x300	; 0x300 <LCD_INIT>
	TempSensor_Init();
 49a:	0e 94 65 02 	call	0x4ca	; 0x4ca <TempSensor_Init>
	uint16 temp = 0 ;
 49e:	1a 82       	std	Y+2, r1	; 0x02
 4a0:	19 82       	std	Y+1, r1	; 0x01
    while (1) 
    {
		TempSensor_Read(&temp);
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <TempSensor_Read>
		
		LCD_Clear();
 4aa:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
		
		LCD_WrtieNumber(temp);
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	9a 81       	ldd	r25, Y+2	; 0x02
 4b2:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_WrtieNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b6:	2f ef       	ldi	r18, 0xFF	; 255
 4b8:	89 e6       	ldi	r24, 0x69	; 105
 4ba:	98 e1       	ldi	r25, 0x18	; 24
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <main+0x30>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0x3a>
 4c6:	00 00       	nop
 4c8:	ec cf       	rjmp	.-40     	; 0x4a2 <main+0x16>

000004ca <TempSensor_Init>:
#include "Temp_Sensor.h"


void TempSensor_Init(void)
{
	ADC_Init();
 4ca:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
 4ce:	08 95       	ret

000004d0 <TempSensor_Read>:
}


void TempSensor_Read(uint16 *temp)
{
	ADC_Read(temp);
 4d0:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Read>
 4d4:	08 95       	ret

000004d6 <__divmodhi4>:
 4d6:	97 fb       	bst	r25, 7
 4d8:	07 2e       	mov	r0, r23
 4da:	16 f4       	brtc	.+4      	; 0x4e0 <__divmodhi4+0xa>
 4dc:	00 94       	com	r0
 4de:	07 d0       	rcall	.+14     	; 0x4ee <__divmodhi4_neg1>
 4e0:	77 fd       	sbrc	r23, 7
 4e2:	09 d0       	rcall	.+18     	; 0x4f6 <__divmodhi4_neg2>
 4e4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__udivmodhi4>
 4e8:	07 fc       	sbrc	r0, 7
 4ea:	05 d0       	rcall	.+10     	; 0x4f6 <__divmodhi4_neg2>
 4ec:	3e f4       	brtc	.+14     	; 0x4fc <__divmodhi4_exit>

000004ee <__divmodhi4_neg1>:
 4ee:	90 95       	com	r25
 4f0:	81 95       	neg	r24
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__divmodhi4_neg2>:
 4f6:	70 95       	com	r23
 4f8:	61 95       	neg	r22
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255

000004fc <__divmodhi4_exit>:
 4fc:	08 95       	ret

000004fe <__udivmodhi4>:
 4fe:	aa 1b       	sub	r26, r26
 500:	bb 1b       	sub	r27, r27
 502:	51 e1       	ldi	r21, 0x11	; 17
 504:	07 c0       	rjmp	.+14     	; 0x514 <__udivmodhi4_ep>

00000506 <__udivmodhi4_loop>:
 506:	aa 1f       	adc	r26, r26
 508:	bb 1f       	adc	r27, r27
 50a:	a6 17       	cp	r26, r22
 50c:	b7 07       	cpc	r27, r23
 50e:	10 f0       	brcs	.+4      	; 0x514 <__udivmodhi4_ep>
 510:	a6 1b       	sub	r26, r22
 512:	b7 0b       	sbc	r27, r23

00000514 <__udivmodhi4_ep>:
 514:	88 1f       	adc	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	5a 95       	dec	r21
 51a:	a9 f7       	brne	.-22     	; 0x506 <__udivmodhi4_loop>
 51c:	80 95       	com	r24
 51e:	90 95       	com	r25
 520:	bc 01       	movw	r22, r24
 522:	cd 01       	movw	r24, r26
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
