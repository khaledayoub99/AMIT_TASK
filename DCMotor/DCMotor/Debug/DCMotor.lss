
DCMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  000004ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db5  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000845  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000769  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062a  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  74:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DcMotor_INIT>:

#include "DcMotor.h"

void DcMotor_INIT(void)
{
	DIO_SetPinDir  (DIO_PORTC , DIO_PIN3 , DIO_PIN_OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	63 e0       	ldi	r22, 0x03	; 3
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir  (DIO_PORTC , DIO_PIN4 , DIO_PIN_OUTPUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	64 e0       	ldi	r22, 0x04	; 4
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir  (DIO_PORTB , DIO_PIN3 , DIO_PIN_OUTPUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	Timer0_INIT();
  9a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Timer0_INIT>
  9e:	08 95       	ret

000000a0 <DcMotor_SetSpeed>:


void DcMotor_SetSpeed(uint8 speed)
{
	speed*=10 ;
	Timer0_PWM_GENR(speed);
  a0:	88 0f       	add	r24, r24
  a2:	98 2f       	mov	r25, r24
  a4:	99 0f       	add	r25, r25
  a6:	99 0f       	add	r25, r25
  a8:	89 0f       	add	r24, r25
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Timer0_PWM_GENR>
  b0:	08 95       	ret

000000b2 <DcMotor_SetDir>:
}

void DcMotor_SetDir(DC_Motor_DIR dir)
{
	switch(dir){
  b2:	88 23       	and	r24, r24
  b4:	19 f0       	breq	.+6      	; 0xbc <DcMotor_SetDir+0xa>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	59 f0       	breq	.+22     	; 0xd0 <DcMotor_SetDir+0x1e>
  ba:	08 95       	ret
		case CLK_Wise_DIR :
	DIO_WritePin   (DIO_PORTC , DIO_PIN3 , DIO_PIN_HIGH);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	63 e0       	ldi	r22, 0x03	; 3
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
	DIO_WritePin   (DIO_PORTC , DIO_PIN4 , DIO_PIN_LOW);
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	64 e0       	ldi	r22, 0x04	; 4
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
		case ANTI_CLK_Wise_DIR :
		DIO_WritePin   (DIO_PORTC , DIO_PIN4 , DIO_PIN_LOW);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
		DIO_WritePin   (DIO_PORTC , DIO_PIN3 , DIO_PIN_HIGH);
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	63 e0       	ldi	r22, 0x03	; 3
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
  e4:	08 95       	ret

000000e6 <DcMotor_Start>:
	}
}

void DcMotor_Start(void)
{
	Timer0_Start();
  e6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Timer0_Start>
  ea:	08 95       	ret

000000ec <DIO_SetPinDir>:
		case DIO_PORTC:
		PORTC = val ;
		break;
		
		case DIO_PORTD:
		PORTD = val ;
  ec:	44 23       	and	r20, r20
  ee:	b9 f1       	breq	.+110    	; 0x15e <DIO_SetPinDir+0x72>
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <DIO_SetPinDir+0xa>
  f4:	6b c0       	rjmp	.+214    	; 0x1cc <DIO_SetPinDir+0xe0>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	89 f0       	breq	.+34     	; 0x11c <DIO_SetPinDir+0x30>
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_SetPinDir+0x1a>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	c9 f0       	breq	.+50     	; 0x132 <DIO_SetPinDir+0x46>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	11 f1       	breq	.+68     	; 0x148 <DIO_SetPinDir+0x5c>
 104:	08 95       	ret
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0x26>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0x22>
 116:	82 2b       	or	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0x3c>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0x38>
 12c:	82 2b       	or	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPinDir+0x52>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPinDir+0x4e>
 142:	82 2b       	or	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDir+0x68>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDir+0x64>
 158:	82 2b       	or	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	91 f0       	breq	.+36     	; 0x186 <DIO_SetPinDir+0x9a>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_SetPinDir+0x82>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	d9 f0       	breq	.+54     	; 0x19e <DIO_SetPinDir+0xb2>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	29 f1       	breq	.+74     	; 0x1b6 <DIO_SetPinDir+0xca>
 16c:	08 95       	ret
 16e:	2a b3       	in	r18, 0x1a	; 26
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_SetPinDir+0x8e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_SetPinDir+0x8a>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	8a bb       	out	0x1a, r24	; 26
 184:	08 95       	ret
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinDir+0xa6>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinDir+0xa2>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
 19e:	24 b3       	in	r18, 0x14	; 20
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_SetPinDir+0xbe>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_SetPinDir+0xba>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	08 95       	ret
 1b6:	21 b3       	in	r18, 0x11	; 17
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDir+0xd6>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDir+0xd2>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	81 bb       	out	0x11, r24	; 17
 1cc:	08 95       	ret

000001ce <DIO_WritePin>:
		break;
	}
}
void DIO_WritePin  (uint8 port , uint8 pin , uint8 val)
{
	switch(val){
 1ce:	44 23       	and	r20, r20
 1d0:	b9 f1       	breq	.+110    	; 0x240 <DIO_WritePin+0x72>
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_WritePin+0xa>
 1d6:	6b c0       	rjmp	.+214    	; 0x2ae <DIO_WritePin+0xe0>
		case DIO_PIN_HIGH:
		switch(port){
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	89 f0       	breq	.+34     	; 0x1fe <DIO_WritePin+0x30>
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_WritePin+0x1a>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	c9 f0       	breq	.+50     	; 0x214 <DIO_WritePin+0x46>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	11 f1       	breq	.+68     	; 0x22a <DIO_WritePin+0x5c>
 1e6:	08 95       	ret
			case DIO_PORTA :
			SET_BIT(PORTA,pin);
 1e8:	2b b3       	in	r18, 0x1b	; 27
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_WritePin+0x26>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_WritePin+0x22>
 1f8:	82 2b       	or	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
			break;
 1fc:	08 95       	ret
			
			case DIO_PORTB :
			SET_BIT(PORTB,pin);
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WritePin+0x3c>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WritePin+0x38>
 20e:	82 2b       	or	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
			break;
 212:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(PORTC,pin);
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WritePin+0x52>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WritePin+0x4e>
 224:	82 2b       	or	r24, r18
 226:	85 bb       	out	0x15, r24	; 21
			break;
 228:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(PORTD,pin);
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_WritePin+0x68>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_WritePin+0x64>
 23a:	82 2b       	or	r24, r18
 23c:	82 bb       	out	0x12, r24	; 18
			break;
 23e:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW:
		
		switch(port){
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 f0       	breq	.+36     	; 0x268 <DIO_WritePin+0x9a>
 244:	28 f0       	brcs	.+10     	; 0x250 <DIO_WritePin+0x82>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	d9 f0       	breq	.+54     	; 0x280 <DIO_WritePin+0xb2>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	29 f1       	breq	.+74     	; 0x298 <DIO_WritePin+0xca>
 24e:	08 95       	ret
			case DIO_PORTA :
			CLR_BIT(PORTA,pin);
 250:	2b b3       	in	r18, 0x1b	; 27
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WritePin+0x8e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WritePin+0x8a>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	8b bb       	out	0x1b, r24	; 27
			break;
 266:	08 95       	ret
			
			case DIO_PORTB :
			CLR_BIT(PORTB,pin);
 268:	28 b3       	in	r18, 0x18	; 24
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_WritePin+0xa6>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_WritePin+0xa2>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	88 bb       	out	0x18, r24	; 24
			break;
 27e:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(PORTC,pin);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_WritePin+0xbe>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_WritePin+0xba>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	85 bb       	out	0x15, r24	; 21
			break;
 296:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(PORTD,pin);
 298:	22 b3       	in	r18, 0x12	; 18
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_WritePin+0xd6>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_WritePin+0xd2>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	82 bb       	out	0x12, r24	; 18
 2ae:	08 95       	ret

000002b0 <main>:

#include "DcMotor.h"

int main(void)
{
    DcMotor_INIT();
 2b0:	0e 94 3e 00 	call	0x7c	; 0x7c <DcMotor_INIT>
	DcMotor_SetDir(CLK_Wise_DIR);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 59 00 	call	0xb2	; 0xb2 <DcMotor_SetDir>
	DcMotor_SetSpeed(10);
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	0e 94 50 00 	call	0xa0	; 0xa0 <DcMotor_SetSpeed>
	DcMotor_Start();
 2c0:	0e 94 73 00 	call	0xe6	; 0xe6 <DcMotor_Start>
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <main+0x14>

000002c6 <Timer0_INIT>:
	
}

void Timer1_SetCallBack(void(*ptr)(void))
{
	ptr_Timer1 =ptr ;
 2c6:	83 b7       	in	r24, 0x33	; 51
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	83 bf       	out	0x33, r24	; 51
 2cc:	83 b7       	in	r24, 0x33	; 51
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	83 bf       	out	0x33, r24	; 51
 2d2:	83 b7       	in	r24, 0x33	; 51
 2d4:	8f 7e       	andi	r24, 0xEF	; 239
 2d6:	83 bf       	out	0x33, r24	; 51
 2d8:	83 b7       	in	r24, 0x33	; 51
 2da:	80 62       	ori	r24, 0x20	; 32
 2dc:	83 bf       	out	0x33, r24	; 51
 2de:	08 95       	ret

000002e0 <Timer0_Start>:
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	83 bf       	out	0x33, r24	; 51
 2e6:	83 b7       	in	r24, 0x33	; 51
 2e8:	8d 7f       	andi	r24, 0xFD	; 253
 2ea:	83 bf       	out	0x33, r24	; 51
 2ec:	83 b7       	in	r24, 0x33	; 51
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	83 bf       	out	0x33, r24	; 51
 2f2:	08 95       	ret

000002f4 <Timer0_PWM_GENR>:
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	38 2f       	mov	r19, r24
 2fa:	36 95       	lsr	r19
 2fc:	27 95       	ror	r18
 2fe:	36 95       	lsr	r19
 300:	27 95       	ror	r18
 302:	ab e7       	ldi	r26, 0x7B	; 123
 304:	b4 e1       	ldi	r27, 0x14	; 20
 306:	0e 94 2b 02 	call	0x456	; 0x456 <__umulhisi3>
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	8c bf       	out	0x3c, r24	; 60
 312:	08 95       	ret

00000314 <__vector_11>:
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
 336:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CT.1662>
 33a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <CT.1662+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <CT.1662+0x1>
 344:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CT.1662>
 348:	89 2b       	or	r24, r25
 34a:	31 f4       	brne	.+12     	; 0x358 <__vector_11+0x44>
 34c:	12 be       	out	0x32, r1	; 50
 34e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ptr_Timer0>
 352:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <ptr_Timer0+0x1>
 356:	09 95       	icall
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <__vector_9>:
}

ISR(TIMER1_OVF_vect)
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	2f 93       	push	r18
 386:	3f 93       	push	r19
 388:	4f 93       	push	r20
 38a:	5f 93       	push	r21
 38c:	6f 93       	push	r22
 38e:	7f 93       	push	r23
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	af 93       	push	r26
 396:	bf 93       	push	r27
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	static uint32 CT =0;
	
	CT++;
 39c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <CT.1689>
 3a0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <CT.1689+0x1>
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <CT.1689+0x1>
 3aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <CT.1689>
	
	if (CT==Num1_OVF)
 3ae:	89 2b       	or	r24, r25
 3b0:	31 f4       	brne	.+12     	; 0x3be <__vector_9+0x44>
	{
		CT = 0 ;
		TCNT0   = Init1_Value;
 3b2:	12 be       	out	0x32, r1	; 50
		(*ptr_Timer1)();
 3b4:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_Timer1>
 3b8:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_Timer1+0x1>
 3bc:	09 95       	icall
	}
	
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
	static uint32 COUNT = 0 ;
	COUNT ++;
 402:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 406:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 410:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(COUNT == Num_CompMatch){
 414:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <Num_CompMatch>
 418:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <Num_CompMatch+0x1>
 41c:	82 17       	cp	r24, r18
 41e:	93 07       	cpc	r25, r19
 420:	49 f4       	brne	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		COUNT=0;
 422:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 426:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		(*ptr_Timer1)();
 42a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_Timer1>
 42e:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_Timer1+0x1>
 432:	09 95       	icall
	}
}
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	bf 91       	pop	r27
 43a:	af 91       	pop	r26
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	7f 91       	pop	r23
 442:	6f 91       	pop	r22
 444:	5f 91       	pop	r21
 446:	4f 91       	pop	r20
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__umulhisi3>:
 456:	a2 9f       	mul	r26, r18
 458:	b0 01       	movw	r22, r0
 45a:	b3 9f       	mul	r27, r19
 45c:	c0 01       	movw	r24, r0
 45e:	a3 9f       	mul	r26, r19
 460:	70 0d       	add	r23, r0
 462:	81 1d       	adc	r24, r1
 464:	11 24       	eor	r1, r1
 466:	91 1d       	adc	r25, r1
 468:	b2 9f       	mul	r27, r18
 46a:	70 0d       	add	r23, r0
 46c:	81 1d       	adc	r24, r1
 46e:	11 24       	eor	r1, r1
 470:	91 1d       	adc	r25, r1
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
