
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000370  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c53  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080a  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075a  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f5  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00002f35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  74:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDir>:
		break;
	}
}
void DIO_SetPinDir  (uint8 port , uint8 pin , uint8 dir)
{
	switch(dir){
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPinDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPinDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPinDir+0xe0>
		case DIO_PIN_OUTPUT:
		switch(port){
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPinDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPinDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPinDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPinDir+0x5c>
  94:	08 95       	ret
			case DIO_PORTA :
			SET_BIT(DDRA,pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
			break;
  aa:	08 95       	ret
			
			case DIO_PORTB :
			SET_BIT(DDRB,pin);
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
			break;
  c0:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(DDRC,pin);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
			break;
  d6:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(DDRD,pin);
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
			break;
  ec:	08 95       	ret
		}
		
		break;
		case DIO_PIN_INPUT:
		
		switch(port){
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPinDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPinDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPinDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPinDir+0xca>
  fc:	08 95       	ret
			case DIO_PORTA :
			CLR_BIT(DDRA,pin);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
			break;
 114:	08 95       	ret
			
			case DIO_PORTB :
			CLR_BIT(DDRB,pin);
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
			break;
 12c:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(DDRC,pin);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
			break;
 144:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(DDRD,pin);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPinDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPinDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <main>:
#include "servo.h"


int main(void)
{
    Servo_Init();
 15e:	0e 94 b7 00 	call	0x16e	; 0x16e <Servo_Init>
	PWM1_Gene(7);
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	0e 94 73 01 	call	0x2e6	; 0x2e6 <PWM1_Gene>
	PWM1_Start();
 168:	0e 94 84 01 	call	0x308	; 0x308 <PWM1_Start>
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0xe>

0000016e <Servo_Init>:

#include "servo.h"

void Servo_Init(void)
{
	DIO_SetPinDir(PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
	PWM1_Init();
 178:	0e 94 62 01 	call	0x2c4	; 0x2c4 <PWM1_Init>
	PWM1_Start();
 17c:	0e 94 84 01 	call	0x308	; 0x308 <PWM1_Start>
 180:	08 95       	ret

00000182 <__vector_11>:
	
}

void Timer1_SetCallBack(void(*ptr)(void))
{
	ptr_Timer1 =ptr ;
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
 1a4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CT.1668>
 1a8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <CT.1668+0x1>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <CT.1668+0x1>
 1b2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CT.1668>
 1b6:	89 2b       	or	r24, r25
 1b8:	31 f4       	brne	.+12     	; 0x1c6 <__vector_11+0x44>
 1ba:	12 be       	out	0x32, r1	; 50
 1bc:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ptr_Timer0>
 1c0:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <ptr_Timer0+0x1>
 1c4:	09 95       	icall
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <__vector_9>:
}

ISR(TIMER1_OVF_vect)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
	static uint32 CT =0;
	
	CT++;
 20a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <CT.1695>
 20e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <CT.1695+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <CT.1695+0x1>
 218:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <CT.1695>
	
	if (CT==Num1_OVF)
 21c:	89 2b       	or	r24, r25
 21e:	31 f4       	brne	.+12     	; 0x22c <__vector_9+0x44>
	{
		CT = 0 ;
		TCNT0   = Init1_Value;
 220:	12 be       	out	0x32, r1	; 50
		(*ptr_Timer1)();
 222:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_Timer1>
 226:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_Timer1+0x1>
 22a:	09 95       	icall
	}
	
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	static uint32 COUNT = 0 ;
	COUNT ++;
 270:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 274:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 27e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(COUNT == Num_CompMatch){
 282:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <Num_CompMatch>
 286:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <Num_CompMatch+0x1>
 28a:	82 17       	cp	r24, r18
 28c:	93 07       	cpc	r25, r19
 28e:	49 f4       	brne	.+18     	; 0x2a2 <__vector_7+0x54>
		COUNT=0;
 290:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 294:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		(*ptr_Timer1)();
 298:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_Timer1>
 29c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_Timer1+0x1>
 2a0:	09 95       	icall
	}
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <PWM1_Init>:



void PWM1_Init(void)
{
	CLR_BIT(TCCR1A,0);
 2c4:	8f b5       	in	r24, 0x2f	; 47
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
 2ca:	8f b5       	in	r24, 0x2f	; 47
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
 2d0:	8e b5       	in	r24, 0x2e	; 46
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
 2d6:	8e b5       	in	r24, 0x2e	; 46
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	8e bd       	out	0x2e, r24	; 46
	
	ICR1= 1250;
 2dc:	82 ee       	ldi	r24, 0xE2	; 226
 2de:	94 e0       	ldi	r25, 0x04	; 4
 2e0:	97 bd       	out	0x27, r25	; 39
 2e2:	86 bd       	out	0x26, r24	; 38
 2e4:	08 95       	ret

000002e6 <PWM1_Gene>:
}

void PWM1_Gene(uint8 duty_cycle)
{
	OCR1A =((duty_cycle*1250)/100)-1 ;
 2e6:	22 ee       	ldi	r18, 0xE2	; 226
 2e8:	34 e0       	ldi	r19, 0x04	; 4
 2ea:	48 2f       	mov	r20, r24
 2ec:	42 9f       	mul	r20, r18
 2ee:	c0 01       	movw	r24, r0
 2f0:	43 9f       	mul	r20, r19
 2f2:	90 0d       	add	r25, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	64 e6       	ldi	r22, 0x64	; 100
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0e 94 8e 01 	call	0x31c	; 0x31c <__divmodhi4>
 2fe:	61 50       	subi	r22, 0x01	; 1
 300:	71 09       	sbc	r23, r1
 302:	7b bd       	out	0x2b, r23	; 43
 304:	6a bd       	out	0x2a, r22	; 42
 306:	08 95       	ret

00000308 <PWM1_Start>:
}


 void PWM1_Start(void)
 {
	 CLR_BIT(TCCR1B,0);
 308:	8e b5       	in	r24, 0x2e	; 46
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	8e bd       	out	0x2e, r24	; 46
	 CLR_BIT(TCCR1B,1);
 30e:	8e b5       	in	r24, 0x2e	; 46
 310:	8d 7f       	andi	r24, 0xFD	; 253
 312:	8e bd       	out	0x2e, r24	; 46
	 SET_BIT(TCCR1B,2);
 314:	8e b5       	in	r24, 0x2e	; 46
 316:	84 60       	ori	r24, 0x04	; 4
 318:	8e bd       	out	0x2e, r24	; 46
 31a:	08 95       	ret

0000031c <__divmodhi4>:
 31c:	97 fb       	bst	r25, 7
 31e:	07 2e       	mov	r0, r23
 320:	16 f4       	brtc	.+4      	; 0x326 <__divmodhi4+0xa>
 322:	00 94       	com	r0
 324:	07 d0       	rcall	.+14     	; 0x334 <__divmodhi4_neg1>
 326:	77 fd       	sbrc	r23, 7
 328:	09 d0       	rcall	.+18     	; 0x33c <__divmodhi4_neg2>
 32a:	0e 94 a2 01 	call	0x344	; 0x344 <__udivmodhi4>
 32e:	07 fc       	sbrc	r0, 7
 330:	05 d0       	rcall	.+10     	; 0x33c <__divmodhi4_neg2>
 332:	3e f4       	brtc	.+14     	; 0x342 <__divmodhi4_exit>

00000334 <__divmodhi4_neg1>:
 334:	90 95       	com	r25
 336:	81 95       	neg	r24
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	08 95       	ret

0000033c <__divmodhi4_neg2>:
 33c:	70 95       	com	r23
 33e:	61 95       	neg	r22
 340:	7f 4f       	sbci	r23, 0xFF	; 255

00000342 <__divmodhi4_exit>:
 342:	08 95       	ret

00000344 <__udivmodhi4>:
 344:	aa 1b       	sub	r26, r26
 346:	bb 1b       	sub	r27, r27
 348:	51 e1       	ldi	r21, 0x11	; 17
 34a:	07 c0       	rjmp	.+14     	; 0x35a <__udivmodhi4_ep>

0000034c <__udivmodhi4_loop>:
 34c:	aa 1f       	adc	r26, r26
 34e:	bb 1f       	adc	r27, r27
 350:	a6 17       	cp	r26, r22
 352:	b7 07       	cpc	r27, r23
 354:	10 f0       	brcs	.+4      	; 0x35a <__udivmodhi4_ep>
 356:	a6 1b       	sub	r26, r22
 358:	b7 0b       	sbc	r27, r23

0000035a <__udivmodhi4_ep>:
 35a:	88 1f       	adc	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	5a 95       	dec	r21
 360:	a9 f7       	brne	.-22     	; 0x34c <__udivmodhi4_loop>
 362:	80 95       	com	r24
 364:	90 95       	com	r25
 366:	bc 01       	movw	r22, r24
 368:	cd 01       	movw	r24, r26
 36a:	08 95       	ret

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
